import  axios from 'axios';

class {
  onCreate() {
    this.state = {
      tasks: [],
    };  

    this.loadTasks();
  } 

  async loadTasks() {
    const {data} = await axios.get("http://localhost:8080/tasks");
    this.state.tasks = data;
  }

  async addTask() {
    const title = this.getEl('title').value;
    await axios.post("http://localhost:8080/tasks", {title, });

    await this.loadTasks();
  }

  async updateTask(id) {
    const title = this.getEl(`title-${id}`).value;
    await axios.patch(`http://localhost:8080/tasks/${id}`, {title, });
    
    await this.loadTasks();
  }

  async deleteTask(id) {
    await axios.delete(`http://localhost:8080/tasks/${id}`);
    await this.loadTasks();
  }

  editTask(id) {
    this.state.tasks = this.state.tasks.map(task => task.id === id ? {
      ...task, editing: true
    } : task);
  }
  
  async cancelEditTask(id) {
    this.state.tasks = this.state.tasks.map(task => task.id === id ? {
      ...task, editing: false
    } : task);
  }


}


<app-layout>
  <h1>ToDo</h1>  
  ${''}
  ${''}
  <ol>
    <for|task| of=state.tasks>
    <li>
      <if(task.editing)>
        <input key=`title-${task.id}` type="text" value=task.title/> 
        <span> </span>
        <button on-click("updateTask", task.id)> 확인 </button>
        <span> </span>
        <button on-click("cancelEditTask", task.id)> 취소 </button>
      </if>
      <else>
        ${task.title}
        <span> </span>
        <button on-click("editTask", task.id)> 수정 </button>
        <span> </span>
        <button on-click("deleteTask", task.id)> 완료 </button>
      </else>
       
    </li>
    </for>  
  </ol>

 <p>
  <!-- scoped는 포거싱을 맞출때 필요함 -->
  <label for:scoped="title">
    할 일
  </label>
  <input key="title" id:scoped="title" required maxlength=15 type="text" placeholder="할 일을 추가해주세요"/>
  <button on-click("addTask")>추가</button>
 </p>
</app-layout>